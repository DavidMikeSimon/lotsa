syntax = "proto3";

package lotsa.proto;

///////////////////
// Common
///////////////////

message Coord {
  sint32 universe = 1;
  sint32 grid = 2;
  sint32 x = 3;
  sint32 y = 4;
}

message Chunk {
  Coord pos = 1;
  sint32 ver = 2;

  message BlockRun {
    uint32 count = 1;
    uint32 block_type = 2;
  }

  repeated BlockRun block_runs = 3;
}

message GenericValue {
  oneof v {
    string string = 1;
    bool boolean = 2;
    int32 integer = 3;
    int32 block_type = 4;
  }
}

///////////////////
// Universe Definition
///////////////////

message PluginDescription {
  message Version {
    uint32 major = 1;
    uint32 minor = 2;
    uint32 patch = 3;
  }

  string name = 1;
  Version version = 2;
  uint32 load_order = 3;
}

message ConditionalExpression {
  enum Operator {
    EQ = 0;
    LT = 1;
    GT = 2;
  }

  ValueExpression left = 1;
  Operator operator = 2;
  ValueExpression right = 3;
}

message ValueExpression {
  message FetchBlockType { }

  message FetchBlockProperty {
    uint32 property = 1;
  }

  message CountBlocks {
    BlockTarget target = 1;
    ConditionalExpression filter = 2;
  }

  oneof e {
    GenericValue constant = 10;
    FetchBlockType fetch_block_type = 11;
    FetchBlockProperty fetch_block_property = 12;
    CountBlocks count_blocks = 13;
  }
}

message BlockTarget {
  message SelfTarget {}
  message ChebyshevNeighborsTarget {
    uint32 range = 1;
  }

  oneof target {
    SelfTarget self = 10;
    ChebyshevNeighborsTarget chebyshev_neighbors = 11;
  }
}

message BlockTypeDef {
  message PropertyProvision {
    message FixedValue {
      GenericValue value = 1;
    }

    uint32 property = 1;

    oneof source {
      FixedValue fixed_value = 10;
    }
  }

  string plugin_name = 1;
  string name = 2;
  uint32 index = 3;
  repeated PropertyProvision property_provisions = 4;
  map<string, string> client_hints = 5;
}

message PropertyDef {
  enum PropType {
    BOOLEAN = 0;
  }

  string plugin_name = 1;
  string name = 2;
  uint32 index = 3;
  PropType prop_type = 4;
  GenericValue default_value = 5;
}

message BlockRuleDef {
  string plugin_name = 1;
  string name = 2;
  uint32 index = 3;
  map<string, ConditionalExpression> prereqs = 4;
  repeated uint32 updaters = 5;
}

message BlockUpdaterDef {
  string plugin_name = 1;
  string name = 2;
  uint32 index = 3;
}

message UniverseDef {
  string url = 1;
  map<string, PluginDescription> plugins = 2;
  // All keys below are in the format "plugin:name", e.g. "basis:empty"
  map<string, PropertyDef> properties = 3;
  map<string, BlockTypeDef> block_types = 4;
  map<string, BlockRuleDef> block_rules = 5;
  map<string, BlockUpdaterDef> block_updaters = 6;
}

///////////////////
// Client -> Server
///////////////////

message ChunkRequest {
  repeated Coord coords = 1;
}

message MessageToServer {
  oneof msg {
     ChunkRequest chunk_request = 10;
     uint32 heartbeat = 11;
  }
}

///////////////////
// Server -> Client
///////////////////

message MessageToClient {
  oneof msg {
    Chunk chunk = 10;
    uint32 heartbeat_ack = 11;
    string global_notice = 12;
  }
}
